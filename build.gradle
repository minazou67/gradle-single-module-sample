apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'pmd'
apply plugin: 'project-report'
apply plugin: 'build-dashboard'

group = 'org.minazou67'
version = '1.0.0-SNAPSHOT'

description = 'This is a sample of a single module of the Gradle project.'

def jdkVersion = 1.7
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava, javadoc].each {
    it.options.encoding = defaultEncoding
}

configurations {
    javancssConf
    pmdConf
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'org.slf4j:slf4j-nop:1.7.10'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.commons:commons-collections4:4.0'
    compile fileTree(dir:'lib', include:'**/*.jar')
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.9.5'
    javancssConf 'org.codehaus.javancss:javancss:33.54'
    pmdConf 'net.sourceforge.pmd:pmd:5.1.3'
}

javadoc {
    options {
        charSet = defaultEncoding
        docEncoding = defaultEncoding
    }
}

jacoco {
    toolVersion = '0.7.2.201409121644'
}

jacocoTestReport {
    description = 'Generate Jacoco coverage reports after running tests.'
    dependsOn 'test'
    reports {
        csv.enabled false
        xml.enabled true
        html.enabled true
    }
}
check.dependsOn(jacocoTestReport)

checkstyle {
    toolVersion = '6.4.1'
    showViolations = true
    configFile = file("$rootDir/checkstyle-checker.xml")
    checkstyleTest.enabled = false
}

findbugs {
    toolVersion = '3.0.0'
    effort = 'max'
    ignoreFailures = true
    excludeFilter = file("$rootDir/findbugs-exclude.xml")
    findbugsTest.enabled = false
}

jdepend {
    toolVersion = '2.9.1'
    ignoreFailures = true
    jdependTest.enabled = false
}

pmd {
    toolVersion = '5.1.3'
    ignoreFailures = true
    targetJdk = jdkVersion
    pmdTest.enabled = false
}

htmlDependencyReport {
    projects = project.allprojects
}
buildDashboard.dependsOn(htmlDependencyReport)

task sourcesJar(type: Jar) {
    description = 'Assembles a jar archive containing the main sources.'
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Assembles a jar archive containing the javadoc.'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task javancss() {
    description = 'Run JavaNCSS analysis for main classes.'
    def javancssDir = file("$project.buildDir/reports/javancss")
    javancssDir.mkdirs()
    ant {
        taskdef(name:'javancss', classname:'javancss.JavancssAntTask', classpath:configurations.javancssConf.asPath)
        javancss(srcdir:'src/main/java', generateReport:'true', outputfile:"$javancssDir/javancss-metrics.txt", format:'plain', includes:'**/*.java')
    }
}
check.dependsOn(javancss)

task cpd (dependsOn: compileJava) {
    description = 'Run CPD analysis for main classes.'
    def cpdDir = file("$project.buildDir/reports/cpd")
    cpdDir.mkdirs()
    ant {
        taskdef(name:'cpd', classname:'net.sourceforge.pmd.cpd.CPDTask', classpath:configurations.pmdConf.asPath)
        cpd(minimumtokencount:50, format:'xml', outputFile: "$cpdDir/main.xml") {
            fileSet(dir:"src/main/java") {
                include(name: '**/*.java')
            }
        }
    }
}
check.dependsOn(cpd)

task wrapper(type: Wrapper) {
    description = 'Download Gradle and generate wrapper scripts.'
    gradleVersion = '2.3'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

[jar, sourcesJar, javadocJar].each {
    it.from 'LICENSE'
    it.rename '(LICENSE)', 'META-INF/$1'
    it.manifest {
        attributes(
            'Manifest-Version': 1.0,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor-Id': project.group,
            'Build-Jdk': System.properties['java.version'],
            'Created-By': 'Gradle ' + gradle.gradleVersion,
        )
    }
}
